// Generated by CoffeeScript 1.7.1
define(function() {
  var Arc, Circle, Coord, PathReader, Point;
  Coord = (function() {
    function Coord(degre, minute, second, orientation) {
      this.degre = degre;
      this.minute = minute;
      this.second = second;
      this.orientation = orientation;
    }

    Coord.fromString = function(str) {
      var coord, degre, minute, orientation, second, _ref, _ref1;
      _ref = str.split(' '), coord = _ref[0], orientation = _ref[1];
      _ref1 = coord.split(':'), degre = _ref1[0], minute = _ref1[1], second = _ref1[2];
      return new Coord(degre, minute, second, orientation);
    };

    return Coord;

  })();
  Point = (function() {
    function Point(lat, lng) {
      this.lat = lat;
      this.lng = lng;
    }

    Point.prototype.discretize = function() {
      return [this];
    };

    Point.fromString = function(str) {
      var lat, latCoord, latOrientation, lng, lngCoord, lngOrientation, _ref;
      _ref = str.split(' '), latCoord = _ref[0], latOrientation = _ref[1], lngCoord = _ref[2], lngOrientation = _ref[3];
      lat = Coord.fromString(latCoord + ' ' + latOrientation);
      lng = Coord.fromString(lngCoord + ' ' + lngOrientation);
      return new Point(lat, lng);
    };

    return Point;

  })();
  Arc = (function() {
    function Arc(center, coord1, coord2) {
      this.center = center;
      this.coord1 = coord1;
      this.coord2 = coord2;
    }

    Arc.prototype.discretize = function() {
      return [this];
    };

    Arc.fromString = function(center, str) {
      var coord1, coord2, _ref;
      _ref = str.split(',').map(Point.fromString), coord1 = _ref[0], coord2 = _ref[1];
      return new Arc(center, coord1, coord2);
    };

    return Arc;

  })();
  Circle = (function() {
    function Circle(center, radius) {
      this.center = center;
      this.radius = radius;
    }

    Circle.prototype.discretize = function() {
      return [this];
    };

    Circle.fromString(function(center, str) {
      var radius;
      radius = parseFloat(str, 10);
      return new Circle(center, radius);
    });

    return Circle;

  })();
  return PathReader = (function() {
    function PathReader() {
      this.center = null;
    }

    PathReader.prototype.readLine = function(str) {
      var code, rest;
      code = str.substring(0, 3);
      rest = str.substring(2, str.length);
      if (code === 'DP ') {
        return Point.fromString(rest);
      }
      if (code === 'DB ') {
        return Arc.fromString(this.center, rest);
      }
      if (code === 'DC ') {
        return Circle.fromString(this.center, rest);
      }
      if (code === 'V X') {
        rest = rest.substring(1, str.length);
        this.center = Point.fromString(rest);
        return null;
      }
      throw {
        message: "Code " + code + " is not supported"
      };
    };

    return PathReader;

  })();
});
